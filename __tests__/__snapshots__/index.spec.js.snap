// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`object-based items match the snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="rta  my-rta-container"
    style={
      Object {
        "background": "orange",
      }
    }
  >
    <textarea
      className="rta__textarea my-rta"
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onSelect={[Function]}
      placeholder="Write a message."
      style={
        Object {
          "background": "red",
        }
      }
      value="Controlled text"
    />
  </div>,
  "nodes": Array [
    <div
      className="rta  my-rta-container"
      style={
        Object {
          "background": "orange",
        }
      }
    >
      <textarea
        className="rta__textarea my-rta"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onSelect={[Function]}
        placeholder="Write a message."
        style={
          Object {
            "background": "red",
          }
        }
        value="Controlled text"
      />
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <ReactTextareaAutocomplete
        className="my-rta"
        closeOnClickOutside={false}
        containerClassName="my-rta-container"
        containerStyle={
          Object {
            "background": "orange",
          }
        }
        itemClassName="my-rta-item"
        itemStyle={
          Object {
            "background": "green",
          }
        }
        listClassName="my-rta-list"
        listStyle={
          Object {
            "background": "pink",
          }
        }
        loaderClassName="my-rta-loader"
        loaderStyle={
          Object {
            "background": "blue",
          }
        }
        loadingComponent={[Function]}
        minChar={1}
        onCaretPositionChange={[Function]}
        onChange={[Function]}
        onSelect={[Function]}
        placeholder="Write a message."
        style={
          Object {
            "background": "red",
          }
        }
        trigger={
          Object {
            ":": Object {
              "component": [Function],
              "dataProvider": [Function],
              "output": [Function],
            },
          }
        }
        value="Controlled text"
      />,
      "_debugID": 17,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ReactTextareaAutocomplete {
        "_changeHandler": [Function],
        "_cleanUpProps": [Function],
        "_closeAutocomplete": [Function],
        "_getCurrentTriggerSettings": [Function],
        "_getSuggestions": [Function],
        "_getTextToReplace": [Function],
        "_getValuesFromProvider": [Function],
        "_onClickAndBlurHandler": [Function],
        "_onSelect": [Function],
        "_reactInternalInstance": [Circular],
        "_selectHandler": [Function],
        "context": Object {},
        "getCaretPosition": [Function],
        "props": Object {
          "className": "my-rta",
          "closeOnClickOutside": false,
          "containerClassName": "my-rta-container",
          "containerStyle": Object {
            "background": "orange",
          },
          "itemClassName": "my-rta-item",
          "itemStyle": Object {
            "background": "green",
          },
          "listClassName": "my-rta-list",
          "listStyle": Object {
            "background": "pink",
          },
          "loaderClassName": "my-rta-loader",
          "loaderStyle": Object {
            "background": "blue",
          },
          "loadingComponent": [Function],
          "minChar": 1,
          "onCaretPositionChange": [Function],
          "onChange": [Function],
          "onSelect": [Function],
          "placeholder": "Write a message.",
          "style": Object {
            "background": "red",
          },
          "trigger": Object {
            ":": Object {
              "component": [Function],
              "dataProvider": [Function],
              "output": [Function],
            },
          },
          "value": "Controlled text",
        },
        "refs": Object {},
        "setCaretPosition": [Function],
        "state": Object {
          "actualToken": "",
          "component": null,
          "currentTrigger": null,
          "data": null,
          "dataLoading": false,
          "left": 0,
          "selectionEnd": 0,
          "selectionStart": 0,
          "top": 0,
          "value": "Controlled text",
        },
        "tokenRegExp": /\\[:\\]\\\\w\\*\\$/,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="rta  my-rta-container"
          style={
            Object {
              "background": "orange",
            }
          }
        >
          <textarea
            className="rta__textarea my-rta"
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onSelect={[Function]}
            placeholder="Write a message."
            style={
              Object {
                "background": "red",
              }
            }
            value="Controlled text"
          />
        </div>,
        "_debugID": 18,
        "_renderedOutput": <div
          className="rta  my-rta-container"
          style={
            Object {
              "background": "orange",
            }
          }
        >
          <textarea
            className="rta__textarea my-rta"
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onSelect={[Function]}
            placeholder="Write a message."
            style={
              Object {
                "background": "red",
              }
            }
            value="Controlled text"
          />
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ReactTextareaAutocomplete
    className="my-rta"
    closeOnClickOutside={false}
    containerClassName="my-rta-container"
    containerStyle={
      Object {
        "background": "orange",
      }
    }
    itemClassName="my-rta-item"
    itemStyle={
      Object {
        "background": "green",
      }
    }
    listClassName="my-rta-list"
    listStyle={
      Object {
        "background": "pink",
      }
    }
    loaderClassName="my-rta-loader"
    loaderStyle={
      Object {
        "background": "blue",
      }
    }
    loadingComponent={[Function]}
    minChar={1}
    onCaretPositionChange={[Function]}
    onChange={[Function]}
    onSelect={[Function]}
    placeholder="Write a message."
    style={
      Object {
        "background": "red",
      }
    }
    trigger={
      Object {
        ":": Object {
          "component": [Function],
          "dataProvider": [Function],
          "output": [Function],
        },
      }
    }
    value="Controlled text"
  />,
}
`;

exports[`object-based items match the snapshot of dropdown, list, and item 1`] = `
<div
  class="rta__autocomplete "
>
  <ul
    class="rta__list my-rta-list"
  >
    <li
      class="rta__item my-rta-item"
      style="background: green;"
    >
      <div
        class="rta__entity rta__entity--selected"
        role="button"
        tabindex="0"
      >
        <div>
          <!-- react-text: 10 -->
           
          <!-- /react-text -->
          <!-- react-text: 11 -->
          :)
          <!-- /react-text -->
          <!-- react-text: 12 -->
           
          <!-- /react-text -->
        </div>
      </div>
    </li>
    <li
      class="rta__item my-rta-item"
      style="background: green;"
    >
      <div
        class="rta__entity "
        role="button"
        tabindex="0"
      >
        <div>
          <!-- react-text: 16 -->
           
          <!-- /react-text -->
          <!-- react-text: 17 -->
          :(
          <!-- /react-text -->
          <!-- react-text: 18 -->
           
          <!-- /react-text -->
        </div>
      </div>
    </li>
  </ul>
</div>
`;

exports[`object-based items match the snapshot of dropdown, list, and item 2`] = `
<ul
  class="rta__list my-rta-list"
>
  <li
    class="rta__item my-rta-item"
    style="background: green;"
  >
    <div
      class="rta__entity rta__entity--selected"
      role="button"
      tabindex="0"
    >
      <div>
        <!-- react-text: 10 -->
         
        <!-- /react-text -->
        <!-- react-text: 11 -->
        :)
        <!-- /react-text -->
        <!-- react-text: 12 -->
         
        <!-- /react-text -->
      </div>
    </div>
  </li>
  <li
    class="rta__item my-rta-item"
    style="background: green;"
  >
    <div
      class="rta__entity "
      role="button"
      tabindex="0"
    >
      <div>
        <!-- react-text: 16 -->
         
        <!-- /react-text -->
        <!-- react-text: 17 -->
        :(
        <!-- /react-text -->
        <!-- react-text: 18 -->
         
        <!-- /react-text -->
      </div>
    </div>
  </li>
</ul>
`;

exports[`object-based items match the snapshot of dropdown, list, and item 3`] = `
<li
  class="rta__item my-rta-item"
  style="background: green;"
>
  <div
    class="rta__entity rta__entity--selected"
    role="button"
    tabindex="0"
  >
    <div>
      <!-- react-text: 10 -->
       
      <!-- /react-text -->
      <!-- react-text: 11 -->
      :)
      <!-- /react-text -->
      <!-- react-text: 12 -->
       
      <!-- /react-text -->
    </div>
  </div>
</li>
`;

exports[`string-based items w/o output fn match match the snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="rta  "
    style={undefined}
  >
    <textarea
      className="rta__textarea ownClassName"
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onSelect={[Function]}
      placeholder="Write a message."
      style={
        Object {
          "background": "red",
        }
      }
      value="Controlled text"
    />
  </div>,
  "nodes": Array [
    <div
      className="rta  "
      style={undefined}
    >
      <textarea
        className="rta__textarea ownClassName"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onSelect={[Function]}
        placeholder="Write a message."
        style={
          Object {
            "background": "red",
          }
        }
        value="Controlled text"
      />
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <ReactTextareaAutocomplete
        className="ownClassName"
        closeOnClickOutside={false}
        loadingComponent={[Function]}
        minChar={1}
        onCaretPositionChange={[Function]}
        onChange={[Function]}
        placeholder="Write a message."
        style={
          Object {
            "background": "red",
          }
        }
        trigger={
          Object {
            ":": Object {
              "component": [Function],
              "dataProvider": [Function],
            },
          }
        }
        value="Controlled text"
      />,
      "_debugID": 41,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ReactTextareaAutocomplete {
        "_changeHandler": [Function],
        "_cleanUpProps": [Function],
        "_closeAutocomplete": [Function],
        "_getCurrentTriggerSettings": [Function],
        "_getSuggestions": [Function],
        "_getTextToReplace": [Function],
        "_getValuesFromProvider": [Function],
        "_onClickAndBlurHandler": [Function],
        "_onSelect": [Function],
        "_reactInternalInstance": [Circular],
        "_selectHandler": [Function],
        "context": Object {},
        "getCaretPosition": [Function],
        "props": Object {
          "className": "ownClassName",
          "closeOnClickOutside": false,
          "loadingComponent": [Function],
          "minChar": 1,
          "onCaretPositionChange": [Function],
          "onChange": [Function],
          "placeholder": "Write a message.",
          "style": Object {
            "background": "red",
          },
          "trigger": Object {
            ":": Object {
              "component": [Function],
              "dataProvider": [Function],
            },
          },
          "value": "Controlled text",
        },
        "refs": Object {},
        "setCaretPosition": [Function],
        "state": Object {
          "actualToken": "",
          "component": null,
          "currentTrigger": null,
          "data": null,
          "dataLoading": false,
          "left": 0,
          "selectionEnd": 0,
          "selectionStart": 0,
          "top": 0,
          "value": "Controlled text",
        },
        "tokenRegExp": /\\[:\\]\\\\w\\*\\$/,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="rta  "
          style={undefined}
        >
          <textarea
            className="rta__textarea ownClassName"
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onSelect={[Function]}
            placeholder="Write a message."
            style={
              Object {
                "background": "red",
              }
            }
            value="Controlled text"
          />
        </div>,
        "_debugID": 42,
        "_renderedOutput": <div
          className="rta  "
          style={undefined}
        >
          <textarea
            className="rta__textarea ownClassName"
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onSelect={[Function]}
            placeholder="Write a message."
            style={
              Object {
                "background": "red",
              }
            }
            value="Controlled text"
          />
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ReactTextareaAutocomplete
    className="ownClassName"
    closeOnClickOutside={false}
    loadingComponent={[Function]}
    minChar={1}
    onCaretPositionChange={[Function]}
    onChange={[Function]}
    placeholder="Write a message."
    style={
      Object {
        "background": "red",
      }
    }
    trigger={
      Object {
        ":": Object {
          "component": [Function],
          "dataProvider": [Function],
        },
      }
    }
    value="Controlled text"
  />,
}
`;

exports[`string-based items with output fn match match the snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="rta  "
    style={undefined}
  >
    <textarea
      className="rta__textarea ownClassName"
      onBlur={[Function]}
      onChange={[Function]}
      onClick={[Function]}
      onSelect={[Function]}
      placeholder="Write a message."
      style={
        Object {
          "background": "red",
        }
      }
      value="Controlled text"
    />
  </div>,
  "nodes": Array [
    <div
      className="rta  "
      style={undefined}
    >
      <textarea
        className="rta__textarea ownClassName"
        onBlur={[Function]}
        onChange={[Function]}
        onClick={[Function]}
        onSelect={[Function]}
        placeholder="Write a message."
        style={
          Object {
            "background": "red",
          }
        }
        value="Controlled text"
      />
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <ReactTextareaAutocomplete
        className="ownClassName"
        closeOnClickOutside={false}
        loadingComponent={[Function]}
        minChar={1}
        onCaretPositionChange={[Function]}
        onChange={[Function]}
        placeholder="Write a message."
        style={
          Object {
            "background": "red",
          }
        }
        trigger={
          Object {
            ":": Object {
              "component": [Function],
              "dataProvider": [Function],
              "output": [Function],
            },
          }
        }
        value="Controlled text"
      />,
      "_debugID": 63,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ReactTextareaAutocomplete {
        "_changeHandler": [Function],
        "_cleanUpProps": [Function],
        "_closeAutocomplete": [Function],
        "_getCurrentTriggerSettings": [Function],
        "_getSuggestions": [Function],
        "_getTextToReplace": [Function],
        "_getValuesFromProvider": [Function],
        "_onClickAndBlurHandler": [Function],
        "_onSelect": [Function],
        "_reactInternalInstance": [Circular],
        "_selectHandler": [Function],
        "context": Object {},
        "getCaretPosition": [Function],
        "props": Object {
          "className": "ownClassName",
          "closeOnClickOutside": false,
          "loadingComponent": [Function],
          "minChar": 1,
          "onCaretPositionChange": [Function],
          "onChange": [Function],
          "placeholder": "Write a message.",
          "style": Object {
            "background": "red",
          },
          "trigger": Object {
            ":": Object {
              "component": [Function],
              "dataProvider": [Function],
              "output": [Function],
            },
          },
          "value": "Controlled text",
        },
        "refs": Object {},
        "setCaretPosition": [Function],
        "state": Object {
          "actualToken": "",
          "component": null,
          "currentTrigger": null,
          "data": null,
          "dataLoading": false,
          "left": 0,
          "selectionEnd": 0,
          "selectionStart": 0,
          "top": 0,
          "value": "Controlled text",
        },
        "tokenRegExp": /\\[:\\]\\\\w\\*\\$/,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="rta  "
          style={undefined}
        >
          <textarea
            className="rta__textarea ownClassName"
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onSelect={[Function]}
            placeholder="Write a message."
            style={
              Object {
                "background": "red",
              }
            }
            value="Controlled text"
          />
        </div>,
        "_debugID": 64,
        "_renderedOutput": <div
          className="rta  "
          style={undefined}
        >
          <textarea
            className="rta__textarea ownClassName"
            onBlur={[Function]}
            onChange={[Function]}
            onClick={[Function]}
            onSelect={[Function]}
            placeholder="Write a message."
            style={
              Object {
                "background": "red",
              }
            }
            value="Controlled text"
          />
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ReactTextareaAutocomplete
    className="ownClassName"
    closeOnClickOutside={false}
    loadingComponent={[Function]}
    minChar={1}
    onCaretPositionChange={[Function]}
    onChange={[Function]}
    placeholder="Write a message."
    style={
      Object {
        "background": "red",
      }
    }
    trigger={
      Object {
        ":": Object {
          "component": [Function],
          "dataProvider": [Function],
          "output": [Function],
        },
      }
    }
    value="Controlled text"
  />,
}
`;
